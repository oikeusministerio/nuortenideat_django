{
    // Firechat sample security rules
    "rules": {
        // By default, make all data private unless specified otherwise.
        ".read": false,
        ".write": false,
        "room-metadata": {
            ".read": true,
            "$roomId": {
                // Moderators may edit any room, public room creator/respondents may edit their room
                ".write": "(auth != null) && (!data.exists() || auth.role >=5 || ((root.child('room-metadata').child($roomId).child('type').val() === 'public') && (root.child('room-metadata').child($roomId).child('respondents').hasChild(auth.uid) || (root.child('room-metadata').child($roomId).child('creator').child('uid').val() === auth.uid))))",
                ".validate": "newData.hasChildren(['name','type'])",
                "id": {
                    ".validate": "(newData.val() === $roomId)"
                },
                "createdByUserId": {
                    ".validate": "(auth.uid === newData.val())"
                },
                "numUsers": {
                    ".validate": "(newData.isNumber())"
                },
                "type": {
                    // organization admins and morerators can create public rooms, anyone can create private rooms
                    ".validate": "(auth != null) && ((((newData.val() === 'public') || (newData.val() === 'archived')) && auth.role >= 3) || (newData.val() === 'private'))"
                },
                // A list of users that may read messages from this room.
                "authorizedUsers": {
                    ".write": "(auth != null) && (!data.exists() || root.child('moderators').hasChild(auth.uid) || data.hasChild(auth.uid))"
                },
                "respondents": {
                    // room creator, moderators, and existing respondents may set respondents
                    ".write": "(auth != null) && (auth.role >= 5) || data.hasChild(auth.uid) || (newData.parent().child('creator').child('uid').val() === auth.uid)",
                    ".read": true
                }
            }
        },
        "room-messages": {
            "$roomId": {
                // A list of messages by room, viewable by anyone for public rooms, or authorized users for private rooms.
                ".read": "(((root.child('room-metadata').child($roomId).child('type').val() === 'public') || (root.child('room-metadata').child($roomId).child('type').val() === 'archived'))) || ((root.child('room-metadata').child($roomId).child('type').val() === 'private') && root.child('room-metadata').child($roomId).child('authorizedUsers').hasChild(auth.uid))",
                "$msgId": {
                    // Allow anyone to append to this list and allow moderators, public room creator and respondents to edit or remove.
                    ".write": "(auth != null) && ((data.val() === null) || (auth.role >= 5) || ((root.child('room-metadata').child($roomId).child('type').val() === 'public') && (root.child('room-metadata').child($roomId).child('respondents').hasChild(auth.uid) || (root.child('room-metadata').child($roomId).child('creator').child('uid').val() === auth.uid)))) || (root.child('room-metadata').child($roomId).child('type').val() === 'private' && root.child('room-metadata').child($roomId).child('authorizedUsers').hasChild(auth.uid)) && (!root.child('suspensions').hasChild(auth.uid) || root.child('suspensions').child(auth.uid).val() < now)",
                    // Honor blocked roles (only visitors/participants can be blocked), unless user is room.creator/respondent.
                    ".validate": "(newData.hasChildren(['userId','name','message','timestamp'])) && (!(auth.role == 0 && root.child('room-metadata').child($roomId).child('blocked-roles').hasChild('visitor')) && !((auth.role == 1) && root.child('room-metadata').child($roomId).child('blocked-roles').hasChild('participant')) || root.child('room-metadata').child($roomId).child('respondents').hasChild(auth.uid) || (root.child('room-metadata').child($roomId).child('creator').child('uid').val() === auth.uid))"
                }
            }
        },
        "room-users": {
            "$roomId": {
                ".read": "(root.child('room-metadata').child($roomId).child('type').val() != 'private' || root.child('room-metadata').child($roomId).child('authorizedUsers').hasChild(auth.uid))",
                // Moderators may delete any room, public room creator/respondents may delete the room
                ".write": "(auth != null) && ((auth.role >= 5) || ((root.child('room-metadata').child($roomId).child('type').val() === 'public') && (root.child('room-metadata').child($roomId).child('respondents').hasChild(auth.uid) || (root.child('room-metadata').child($roomId).child('creator').child('uid').val() === auth.uid))))",
                "$userId": {
                    // A list of users by room, viewable by anyone for public rooms, or authorized users for private rooms.
                    ".write": "(auth != null) && ($userId === auth.uid || root.child('moderators').hasChild(auth.uid))",
                    "$sessionId": {
                        ".validate": "(!newData.exists() || newData.hasChildren(['id','name']))"
                    }
                }
            }
        },
        "users": {
            // A list of users and their associated metadata, which can be updated by the single user or a moderator.
            "$userId": {
                ".write": "(auth != null) && (auth.uid === $userId || (auth.role >= 5))",
                ".read": "(auth != null) && (auth.uid === $userId || (auth.role >= 5))",
                ".validate": "($userId === newData.child('id').val())",
                "invites": {
                    // A list of chat invitations from other users, append-only by anyone.
                    "$inviteId": {
                        // Allow the user who created the invitation to read the status of the invitation.
                        ".read": "(auth != null) && (auth.uid === data.child('fromUserId').val())",
                        ".write": "(auth != null) && (!data.exists() && (data.child('fromUserId').val() === auth.id) && ((auth.role >= 3) || $userId.beginsWith('moderator-') || $userId.beginsWith('organization-'))) || ($userId === auth.id)",
                        ".validate": "newData.hasChildren(['fromUserId','fromUserName','roomId']) && (newData.child('id').val() === $inviteId)"
                    }
                },
                "notifications": {
                    // A list of notifications, which can only be appended to by moderators.
                    "$notificationId": {
                        ".write": "(auth != null) && (data.val() === null) && (root.child('moderators').hasChild(auth.uid))",
                        ".validate": "newData.hasChildren(['fromUserId','timestamp','notificationType'])",
                        "fromUserId": {
                            ".validate": "newData.val() === auth.uid"
                        }
                    }
                },
                "rooms": {
                    // Anyone can read moderator/organization rooms, so users can tell if they need to be re-invited to private chats.
                    // Organization admins/moderators can read anyone's rooms for the same reason.
                    ".read": "(auth != null) && ((auth.role >= 3) || $userId.beginsWith('moderator-') || $userId.beginsWith('organization-'))"
                }
            }
        },
        "user-names-online": {
            // A mapping of active, online lowercase usernames to sessions and user ids.
            ".read": true,
            "$username": {
                "$sessionId": {
                    ".write": "(auth != null) && (!data.exists() || !newData.exists() || data.child('id').val() === auth.uid) && ($username == auth.name.toLowerCase())",
                    "id": {
                        ".validate": "(newData.val() === auth.uid)"
                    },
                    "name": {
                        ".validate": "newData.isString() && (newData.val() === auth.name)"
                    }
                }
            }
        },
        "moderators": {
            ".read": "(auth != null)"
        },
        "moderators-online": {
            ".read": true,
            "$username": {
                "$sessionId": {
                    ".write": "(auth != null) && (!data.exists() || !newData.exists() || data.child('id').val() === auth.uid) && (auth.role >= 5) && ($username == auth.name.toLowerCase())",
                    "id": {
                        ".validate": "(newData.val() === auth.uid)"
                    },
                    "name": {
                        ".validate": "newData.isString() && (newData.val() === auth.name)"
                    }
                }
            }
        },
        "organization-admins-online": {
            ".read": true,
            "$organizationId": {
                "$username": {
                    "$sessionId": {
                        ".write": "(auth != null) && (!data.exists() || !newData.exists() || data.child('id').val() === auth.uid) && (auth.role >= 3) && ($username == auth.name.toLowerCase())",
                        "id": {
                            ".validate": "(newData.val() === auth.uid)"
                        },
                        "name": {
                            ".validate": "newData.isString() && (newData.val() === auth.name)"
                        }
                    }
                }
            }
        },
        "suspensions": {
            ".write": "(auth != null) && (root.child('moderators').hasChild(auth.uid))",
            ".read": "(auth != null) && (root.child('moderators').hasChild(auth.uid))"
        }
    }
}